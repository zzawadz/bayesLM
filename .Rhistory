x = 1:100
y = 5*x+6+rnorm(100)
x = 1:100
y = 5*x+6+rnorm(100)
dane = data.frame(y,x)
dane
require(bayesLM, quietly=TRUE) #1
library(bayesLM)
fitBLM
plotCoefDistributions(model)
require(bayesLM, quietly=TRUE) #1
model = fitBLM(y~x, dane) #2
x = 1:100
y = 5*x+6+rnorm(100)
dane = data.frame(y,x)
require(bayesLM, quietly=TRUE) #1
model = fitBLM(y~x, dane) #2
plotCoefDistributions(model)
summary(lm(y~x,data = dane))
gibbs = getGibbsStats(model, burn = 100, n = 1000)
packageDescription("stats")
packageDescription("depthproc")
gibbs = getGibbsStats(model, burn = 100, n = 1000)
library(bayesLM)
getClass("BLM")
lm.fit
lm.gls
formula = x~y
?formula
data.frame(x = rnorm(100), y = rnorm(100))
z =  data.frame(x = rnorm(100), y = rnorm(100))
z[formula]
z[formula
formula = x~y
z[formula]
terms(formula)
formula = x~y-1
terms(formula)
formula = x~y+z-1
terms(formula)
all.vars(formula)
terms(formula)
attr(terms(formula),"variables")
class(attr(terms(formula),"variables"))
?call
attr(terms(formula),"variables")
formula = x~y-1
attr(terms(formula),"variables")
z[attr(terms(formula),"variables")]
eval(attr(terms(formula),"variables"))
lm.gls
model.matrix(formula)
model.matrix(formula, z)
z =  data.frame(x = rnorm(100), y = rnorm(100)+100)
model.matrix(formula, z)
model.frame(formula, z)
class(model.matrix(formula, z))
data =  data.frame(x = rnorm(100), y = rnorm(100)+100)
formula = x~y-1
terms(formula)
attr(formula,"intercept")
formula
formula = x~y+1
attr(formula,"intercept")
attr(terms(formula),"intercept")
formula = x~y-1
attr(terms(formula),"intercept")
formula = x~y-1
data =  data.frame(x = rnorm(100), y = rnorm(100)+100)
X = model.matrix(formula, data)
formula
X
if(attr(terms(formula),"intercept") == 1)  X = cbind(1, X)
X
class(X)
formula = x~y
X = model.matrix(formula, data)
X
formula = x~y
X = model.matrix(formula, data)
X
library(bayesLM)
setGeneric("getModelMatrix", function(model) standardGeneric("getModelMatrix"))
setMethod("getModelatrix", "BLM", function(model) model.matrix(model@formula, model@data))
setGeneric("getModelMatrix", function(model) standardGeneric("getModelMatrix"))
setMethod("getModelMatrix", "BLM", function(model) model.matrix(model@formula, model@data))
x = 1:100
y = 5*x+6+rnorm(100)
dane = data.frame(y,x)
#Zaczynamy liczyc
require(bayesLM, quietly=TRUE) #1
model = fitBLM(y~x, dane)      #2
model
getModelMatrix(model)
library(bayesLM)
library(bayesLM)
library(bayesLM)
library(bayesLM)
library(bayesLM)
require(metRology)
require("metRology")
install.packages("metRology")
require("metRology")
rt.scaled
densityStudnet = function(x, df, mu, prec)
{
(gamma((df+1)/2)/gamma(df/2)) * (prec/pi/df)^(0.5)*(1+(prec*(x-mu)^2)/df)^(-(df+1)/2)
}
curve(densityStudnet(x,5,mu=0,1))
curve(densityStudnet(x,5,mu=0,1))
curve(densityStudnet(x,5,mu=0,1), xlim = c(-3,,3))
curve(densityStudnet(x,5,mu=0,1), xlim = c(-3,3))
curve(densityStudnet(x,5,mu=0,1), xlim = c(-3,3), add = TRUE)
curve(densityStudnet(x,5,mu=0,1), xlim = c(-3,3), add = TRUE, col = "red")
curve(rt.scaled(x,5,mu=0,1), xlim = c(-3,3), add = TRUE, col = "red")
curve(rt.scaled(x,5,mu=0,1,1), xlim = c(-3,3), add = TRUE, col = "red")
curve(rt.scaled(x,5), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=0,1), xlim = c(-3,3))
curve(rt.scaled(x,5), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=0,1), xlim = c(-3,3))
curve(dt.scaled(x,5), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=1,1), xlim = c(-3,3))
curve(densityStudnet(x,5,mu=1,1), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=1), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,1), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,2), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,1/2), xlim = c(-3,3), add = TRUE, col = "red")
?dt
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
dt.scaled
?dt.scaled
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,5/3*2), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,sqrt(5/3*4)), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,sqrt(5/3*4)), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,1/sqrt(5/3*4)), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,1/(5/3*2), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,1/(5/3*2), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,1/(5/3*2)), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,1/(5/3*1/2)), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,1/(5/3*1/2)), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,1/(1/2)), xlim = c(-3,3), add = TRUE, col = "red")
curve(dt.scaled(x,5,mean=2,(1/2)), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,2), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,sqrt(1/2)), xlim = c(-3,3), add = TRUE, col = "red")
curve(densityStudnet(x,5,mu=2,5), xlim = c(-3,6))
curve(dt.scaled(x,5,mean=2,sqrt(1/5)), xlim = c(-3,3), add = TRUE, col = "red")
setGeneric("getSummaryStatistics", function(model) standardGeneric("getSummaryStatistics"))
library(bayesLM)
require(bayesLM)
x = 1:100
y = 5*x+6+rnorm(100)
dane = data.frame(y,x)
#Zaczynamy liczyc
require(bayesLM, quietly=TRUE) #1
model = fitBLM(y~x, dane)      #2
plotCoefDistributions(model)   #3
getSummaryStatistics(model)
setMethod("getSummaryStatistics", "BLM", function(model)
{
model@mu
})
getSummaryStatistics(model)
getSummaryStatistics(model)
setMethod("getSummaryStatistics", "BLM", function(model)
{
model@coeff
})
getSummaryStatistics(model)
cat(model@coeff)
names(model@coeff)
t_n = names(model@coeff)
cat(paste(t_n,model@coeff))
cat(paste(t_n,model@coeff, sep = ":"))
cat(paste(t_n,model@coeff, sep = ":"),sep="\n")
?cat
summary.lm
show.lm
show
getMethod("show")
getMethod("show",signature="lm")
getMethod("show")
showDefault
cat(paste(t_n,model@coeff, sep = ":"),sep="\n")
cat(paste(t_n,model@coeff, sep = ":  "),sep="\n")
cat(paste(t_n,round(model@coeff,4), sep = ":  "),sep="\n")
